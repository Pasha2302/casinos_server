# Generated by Django 5.0 on 2024-01-09 05:12

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app_casinos', '0026_day_remove_bonus_days_remove_dayofweek_day_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='dayofweek',
            options={'ordering': ['id'], 'verbose_name': 'Daily Availability', 'verbose_name_plural': 'Daily Availability'},
        ),
        migrations.AlterField(
            model_name='bonus',
            name='bonus_only',
            field=models.IntegerField(blank=True, help_text='Manually calculate the total bonus amount when wagering applies to bonus only. For instance, if you deposited 100 EUR and received a 100 EUR bonus, the total bonus amount would be 100 EUR.', null=True, verbose_name='Bonus Only'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='bonus_plus_deposit',
            field=models.IntegerField(blank=True, help_text='Manually calculate the total bonus amount when wagering applies to both the bonus and deposit. For instance, if you deposited 100 EUR and received a 100 EUR bonus, the total bonus amount would be 200 EUR.', null=True, verbose_name='Bonus + Deposit'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='bonus_plus_freespins_value',
            field=models.IntegerField(blank=True, help_text='Manually calculate the total value of awarded free spins and add the bonus only amount. For example, if you get 50 free spins where each spin is 0.1 EUR then the total value is 5 EUR', null=True, verbose_name='Bonus + Freespins value'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='bonus_subtype',
            field=models.ManyToManyField(blank=True, help_text='Subtype of the bonus. For example - Christmas bonus.', related_name='bonus', to='app_casinos.bonussubtype', verbose_name='Bonus Subtype'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='bonus_type',
            field=models.ForeignKey(default=None, help_text='Type of the bonus. For example - Welcome bonus', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bonus', to='app_casinos.bonustype'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='calculation_bonus_deposit',
            field=models.FloatField(blank=True, help_text='This calculation shows how many bets (using max bet for the bonus) is needed to wager the bonus. This applies to bonus + deposit wagering type. <br> FORMULA = BONUS + DEPOSIT (TOTAL BONUS AMOUNT) * BONUS + DEPOSIT (WAGERING) / AMOUNT (MAX BET)', null=True, verbose_name='Amount of Bets Calculation (Bonus+Deposit)'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='calculation_bonus_only',
            field=models.FloatField(blank=True, help_text='This calculation shows how many bets (using max bet for the bonus) is needed to wager the bonus. This applies to bonus only wagering type. <br> FORMULA = BONUS ONLY (TOTAL BONUS AMOUNT) * BONUS ONLY (WAGERING) / AMOUNT (MAX BET)', null=True, verbose_name='Amount of Bets Calculation (Bonus Only)'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='link',
            field=models.URLField(blank=True, help_text='URL of the particular bonus. For example - https://vavada.com/welcome-bonus', null=True, verbose_name='Bonus URL'),
        ),
        migrations.AlterField(
            model_name='bonus',
            name='name',
            field=models.CharField(default=None, help_text="Name of the bonus. For example - 'Welcome Bonus Pack'", max_length=255, verbose_name='Bonus Name'),
        ),
        migrations.AlterField(
            model_name='bonusamount',
            name='value',
            field=models.IntegerField(help_text="The maximum bonus amount that the casino can match. Usually defined defined as: 'up to 200 EUR'", null=True, verbose_name='(CAP) value'),
        ),
        migrations.AlterField(
            model_name='bonusbuyfeature',
            name='choice',
            field=models.BooleanField(default=False, help_text="For example - Can I buy 'Buy Feature' in Money Train 3 with an active welcome bonus? My winnings won't be canceled?", verbose_name='bonus buy feature choice'),
        ),
        migrations.AlterField(
            model_name='bonusexpiration',
            name='days',
            field=models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30)], help_text='This means that the player has X days to wager his bonus. Otherwise it will be canceled, etc.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)], verbose_name='Amount of Days'),
        ),
        migrations.AlterField(
            model_name='bonusmaxbet',
            name='value',
            field=models.IntegerField(blank=True, help_text='Maximum bet allowed by T&C', null=True, verbose_name='Bonus Max Bet value'),
        ),
        migrations.AlterField(
            model_name='bonusmaxbetautomatic',
            name='automatic',
            field=models.BooleanField(default=False, help_text="In some casinos max bet is restricted automatically meaning that you can't place a bigger bet than allowed if you have an active bonus. However, in some casinos this is not automatically restricted and customer can easily make a mistake by placing a higher bet and thus canceling his bonus and winnings from it."),
        ),
        migrations.AlterField(
            model_name='bonusmaxwin',
            name='max_value',
            field=models.IntegerField(blank=True, help_text='Max win is the same as max withdrawal from the bonus.', null=True, verbose_name='Bonus Max Win value'),
        ),
        migrations.AlterField(
            model_name='bonusmindep',
            name='min_value',
            field=models.IntegerField(help_text='Minimum deposit to active the bonus. Usually around 10 EUR', null=True, verbose_name='Bonus min dep value'),
        ),
        migrations.AlterField(
            model_name='bonusrestrictioncountry',
            name='country',
            field=models.ManyToManyField(help_text="Pick countries that can't receive this bonus", related_name='bonus_restriction_country', to='app_casinos.country'),
        ),
        migrations.AlterField(
            model_name='bonusrestrictiongame',
            name='game',
            field=models.ManyToManyField(help_text="Pick slots that you can't play with active bonus", related_name='bonus_restriction_game', to='app_casinos.game'),
        ),
        migrations.AlterField(
            model_name='bonusrestrictionrtpgame',
            name='value',
            field=models.FloatField(help_text='Some slots are not allowed for bonus wagering due to high RTP', null=True, verbose_name='Games with RTP higher than %'),
        ),
        migrations.AlterField(
            model_name='bonusslot',
            name='game',
            field=models.ManyToManyField(blank=True, help_text='Slots where you can use free spins', related_name='bonus_game', to='app_casinos.game'),
        ),
        migrations.AlterField(
            model_name='bonusspecialnote',
            name='description',
            field=models.TextField(blank=True, help_text='Something worth mentioning. For example - Bonus is available only via Skrill deposit', null=True, verbose_name='Special Note'),
        ),
        migrations.AlterField(
            model_name='bonusvalue',
            name='value',
            field=models.IntegerField(help_text="Bonus value in percentage. So, for example if it says '200% up to 200 EUR' then bonus value is 200%", null=True, verbose_name='Value %'),
        ),
        migrations.AlterField(
            model_name='dayofweek',
            name='days',
            field=models.ManyToManyField(blank=True, help_text="For example, if the bonus is only available on Tuesday, please select 'Tuesday' from the dropdown menu", null=True, related_name='day_of_week', to='app_casinos.day'),
        ),
        migrations.AlterField(
            model_name='freespinamount',
            name='value',
            field=models.IntegerField(blank=True, help_text='Number of free spins that you can get by activating this bonus', null=True, verbose_name='Free Spins value'),
        ),
        migrations.AlterField(
            model_name='onespin',
            name='value',
            field=models.FloatField(blank=True, help_text='The value of one free spin. Usually around 0.1 EUR', null=True, verbose_name='One Spin value'),
        ),
        migrations.AlterField(
            model_name='promotionperiod',
            name='start_date',
            field=models.DateField(help_text='If there is something specific like Christmas bonus, then we should add the period during which it is available', verbose_name='Start Date'),
        ),
        migrations.AlterField(
            model_name='socialbonus',
            name='choice',
            field=models.BooleanField(default=False, help_text='If the casino has social bonuses in Twitter, Telgram, etc., please check the box', verbose_name='social bonuses choice'),
        ),
        migrations.AlterField(
            model_name='turnoverbonus',
            name='choice',
            field=models.BooleanField(default=False, help_text='If the bonus is of the turnover type, please tick the box', verbose_name='turnover bonus choice'),
        ),
        migrations.AlterField(
            model_name='wager',
            name='value',
            field=models.IntegerField(blank=True, help_text='Wagering amount for free spins', null=True, verbose_name='Wager value'),
        ),
        migrations.AlterField(
            model_name='wagering',
            name='tbwe',
            field=models.TextField(blank=True, help_text='For example - To activate the Welcome Bonus, a deposit of €100 is made. The total wagering amount is €100 x 30 = €3000, therefore, after every €300 wagered, €10 will be credited to the balance.', null=True, verbose_name='Turnover bonus wagering example'),
        ),
        migrations.AlterField(
            model_name='wagering',
            name='tbwr',
            field=models.TextField(blank=True, help_text='For example - Wagering requirements of x30 apply for the bonus. The bonus is awarded in parts of 10% of the activated bonus amount, after wagering every 10% x30 on the bonus.', null=True, verbose_name='Turnover bonus wagering requirement'),
        ),
        migrations.AlterField(
            model_name='wageringbonusplusdeposit',
            name='bonus_only',
            field=models.IntegerField(blank=True, help_text='Applies if wagering requirements are for bonus only', null=True, verbose_name='(Wagering) Bonus Only'),
        ),
        migrations.AlterField(
            model_name='wageringbonusplusdeposit',
            name='bonus_plus_deposit',
            field=models.IntegerField(blank=True, help_text='Applies if wagering requirements are for bonus + deposit', null=True, verbose_name='(Wagering) Bonus + Deposit'),
        ),
        migrations.AlterField(
            model_name='wageringcontribution',
            name='contribution_description',
            field=models.ForeignKey(help_text='Usually slots are 100% and everything else (roulette, blackjack, etc) is 0% or 5%', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wagering_contribution', to='app_casinos.wageringcontributionvalue'),
        ),
    ]
